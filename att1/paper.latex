\documentclass[a4paper,12pt,russian]{article}
\usepackage{babel,amsmath}

%sorry for this (idk anything about typography)
\def\sp{\enspace} %sp = spacing
\newcommand{\mor}{\sp |} %mor = my or
\newcommand{\lit}[1]{\sp `` #1 "} %lit = literal
\newcommand{\sysName}{$\lambda\!\!\rightarrow\!\! A$}

\title{Простые атрибутные типы (черновик 3)}
\author{Михайлов Анатолий Андреевич (601-41)}

\begin{document}
\maketitle
\begin{abstract}
В работе описывается система <<\sysName>>, основывающаяся на просто типизированном лямбда-исчислении,  имеющая свойства, полезные в области формальных доказательств. Приведены примеры использования в доказательстве теорем в арифметике Пеано.
\end{abstract}

\paragraph{Определения} Тип -- последовательность функциональных атрибутов (ФА) и предикатных атрибутов (ПА), при этом в последовательности может не быть ФА или ПА, но длинна последовательности $\geq$ 1. Синтаксис в расширенной форме Бэкуса-Наура:
\begin{align*}
%ID &::= [0-9a-zA-Z_-]+ \\
A &::= ID \\
AL &::= A \lit{,} \sp AL \mor \sp A \\
F &::= (AL \to AL) \\
FL &::= F,FL \\
T &::= FL \lit{,} \sp AL \mor \sp FL \mor \sp AL
\end{align*}
Примеры ПА: \quad $ a \quad b \quad c \quad Nat \quad Even \quad Odd $ \newline
Примеры ФА: \quad $ a \to b \quad c,d \to e,f,g \quad Nat,Even \to Nat,Odd$
\paragraph{Основная идея} Выражение может иметь несколько типов одновременно. В таком случае, типы можно воспринимать как атрибуты этого выражения. Пример: утверждение <<$a:\,A,B$>> значит <<выражение $a$ имеет атрибуты $A$ и $B$>>. Но, это еще не значит, что выражение $a$ не имеет атрибута $C$. Это значит лишь то, что для выражения $a$ не доказан атрибут $C$. Его можно получить, применив, например $a$ к $f:\,A \to C$.

\paragraph{Проверка типов} Пусть дана функция $f:\,(A,B)\to C$. Тогда применение этой функции к аргументу $a$ считается возможным, если $a:\,A,B$, при этом $a$ может иметь любое количество дополнительных атрибутов, главное чтобы были атрибуты $A$ и $B$.

\paragraph{Несколько типов функции} Эта особенность позволяет элегантно (по мнению автора) реализовать варианты функции. Отличный пример -- определение функции $S$ в примерах с арифметикой Пеано. Механизм выбора варианта прост -- выбирается самый левый атрибут функции, подходящий по атрибутам аргументу. Соответственно, слева нужно размещать самые частные случаи, а справа самые общие.

\paragraph{Типы как утверждения} Эта интерпретация также применима к описываемому формализму. Пример: $x: Nat, Even$ означает, что $x$ -- натуральное четное число. Переводя на язык логики предикатов -- $Nat(x) \wedge Even(x)$. Каждое утверждение о типизации можно тривиально перевести на язык логики предикатов.

\paragraph{Описание в системе натурального вывода} Этот параграф требует значительной доработки/переработки. Если a,b -- термы, A,B,C,D -- типы, то:
\newline \newline
Абстракция:
$$
\frac{a:\,A,... \quad b=\lambda x:\,(B,...).\,a}{b:\,(B,...) \to (A,...)}
$$
\newline
Применение:
$$
\frac{a:\,A,... \quad b:\,(A \to (C,...)),(B \to (C,D,...))}{(b a):\,C,...}
$$
$$
\frac{a:\,B,... \quad b:\,(A \to (C,...)),(B \to (C,D,...))}{(b a):\,C,D,...}
$$

\paragraph{Доказательство четности числа 4 в арифметике Пеано} Оно вдохновлялось доказательством в системе Twelf, но получилось значительно короче и дополнительно включает в себя определение нечетных чисел. \newline Аксиомы:
$$
0:\,Nat,\,Even
$$
$$
S:\,(Nat,Even) \to (Nat,Odd),(Nat,Odd) \to (Nat,Even)
$$
Построения:
$$
1 = (S 0) \qquad 2 = (S 1) \qquad 3 = (S 2) \qquad 4 = (S 3)
$$
Термы $1$, $3$ будут иметь атрибуты $(Nat,Odd)$ \newline
Термы $0$, $2$, $4$ будут иметь атрибуты $(Nat,Even)$

\paragraph{Доказательство четности/нечетности числа n+2 в арифметике Пеано} Аксиомы:
$$
0:\,Nat,\,Even
$$
$$
S:\,(Nat,Even) \to (Nat,Odd),(Nat,Odd) \to (Nat,Even)
$$
Построения:
$$
S' = \lambda n:\,Nat.\,(S (S n))
$$
$S'$ имеет атрибуты $(Nat,Even) \to (Nat,Even),(Nat,Odd) \to (Nat,Odd)$

\paragraph{Расширение} Уверен, что существуют системы зависимых атрибутных типов, подобных тем, что есть в лямбда кубе, но я не могу осилить их описание и изучение с текущим уровнем знаний.

\paragraph{О применении в языках программирования} Это изначальная цель разработки. Есть идеи о реализации языка программирования или системы автоматизированных доказательств (или того и другого, как в Coq), основывающегося на этом формализме. Есть опыт по реализации простых формализмов (типа $\lambda$-исчисления), но я понимаю, что мне не хватает знаний для чего-либо серьезного.
\end{document}
